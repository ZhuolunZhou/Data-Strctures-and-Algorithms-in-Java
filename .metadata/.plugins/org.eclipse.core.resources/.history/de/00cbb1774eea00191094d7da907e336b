package laiOffer;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class TestBench {

	public static void main(String[] args) throws MalformedURLException {
//		Permutations permu = new Permutations();
//		String s = "abc";
//		List<String> result = new ArrayList<>();
//		result = permu.permutations(s);
//		for (String str : result) {
//			System.out.println(str);
//		}
//		Combinations c = new Combinations();
//		int[] array = new int[] {2, 1, 3, 4};
//		List<List<Integer>> result = c.combine(array, 4);
//		
//		ValidParenthesis vp = new ValidParenthesis();
//		List<String> result = vp.validParentheses(1, 1, 0);
//		
//		for (int j = 0; j < result.size(); j++) {
//			System.out.print(result.get(j) + " ");
//		}		
//		AllFactors a = new AllFactors();
//		a.factors(100);
//		NQueens nq = new NQueens();
//		System.out.println(nq.nqueens(8));
//		Maze mz = new Maze();
//		int[][] result = mz.maze(5);
//		for (int i = 0; i < result.length; i++) {
//			for (int j = 0; j < result[0].length; j++) {
//				System.out.print(result[i][j]);
//			}
//			System.out.println();
//		}
//		CombinationSumII cs = new CombinationSumII();
//		int[] num = {10,1,2,7,6,1,5};
//		List<List<Integer>> result = cs.combinationSum2(num, 8);
//		for (List<Integer> l : result) {
//			for (Integer i : l) {
//				System.out.print(i + " ");
//			}
//			System.out.println();
//		}
//		char[][] board = {{'A','B','C','E'},{'S','F','C','S'},{'A','D','E','E'}};
//		WordSearch ws = new WordSearch();
//		System.out.println(ws.exist(board, "SEE", visited));
//		WordSearchII ws = new WordSearchII();
//		char[][] board = {{'o','a','a','n'},{'e','t','a','e'},{'i','h','k','r'},{'i','f','l','v'}};
//		String[] words = {"oath", "pea","eat","rain"};
//		boolean[][] visited = new boolean[board.length][board[0].length];
//		ws.findWords(board, words, visited);
//		for (boolean[] i : visited) {
//			for (boolean j : i) {
//				System.out.print(j);
//			}
//			System.out.println();
//		}
//		System.out.println(ws.isWord(board, "ABDC"));
//		PermutationInString ps = new PermutationInString();
//		String s1 = "love";
//		String s2 = "oolve";
//		System.out.println(ps.containsPermutation(s1, s2));
		//System.out.println(ps.hasSubstring(s1.toCharArray(), s2));
//		TelephoneCombination tc = new TelephoneCombination();
//		String[] result = tc.combinations(231);
//		System.out.println(Arrays.toString(result));
//		IPAddress ip = new IPAddress();
//		System.out.println(ip.Restore("10809010"));
//		CloneGraph cg = new CloneGraph();
//		List<GraphNode> list = new ArrayList<>();
//		{0->1,2;1->0,3,4;2->0,3,4;3->1,2;4->1,2;}
//		GraphNode one = new GraphNode(0);
//		one.neighbors.add(new GraphNode(1));
//		one.neighbors.add(new GraphNode(2));
//		GraphNode two = new GraphNode(1);
//		two.neighbors.add(new GraphNode(0));
//		two.neighbors.add(new GraphNode(3));
//		two.neighbors.add(new GraphNode(4));
//		GraphNode three = new GraphNode(2);
//		three.neighbors.add(new GraphNode(0));
//		three.neighbors.add(new GraphNode(3));
//		three.neighbors.add(new GraphNode(4));
//		GraphNode four = new GraphNode(3);
//		four.neighbors.add(new GraphNode(1));
//		four.neighbors.add(new GraphNode(2));
//		GraphNode five = new GraphNode(4);
//		five.neighbors.add(new GraphNode(1));
//		five.neighbors.add(new GraphNode(2));
//		list.add(one);
//		list.add(two);
//		list.add(three);
//		list.add(four);
//		list.add(five);
//		List<GraphNode> result = cg.copy(list);
//		System.out.println(result.size());
//		findSubstring fs = new findSubstring();
//		System.out.println(fs.find("barfoothefoobarman", new String[] {"foo","bar"}));
//		UniquePath up = new UniquePath();
//		System.out.println(up.uniquePaths(19, 13));
//		WordSearch ws = new WordSearch();
//		System.out.println(ws.exist(new char[][] {{'a'}}, "ab"));
//		PalindromeParition pp = new PalindromeParition();
//		List<List<String>> result = pp.partition("abc");
//		for (List<String> ls : result) {
//			System.out.println(ls);
//		}
//		WordBreakII wb = new WordBreakII();
//		List<String> wordDict = new ArrayList<>();
//		wordDict.add("apple");
//		wordDict.add("pen");
//		wordDict.add("applepen");
//		wordDict.add("pine");
//		wordDict.add("pineapple");
//		List<String> result = wb.wordBreak("pineapplepenapple", wordDict);
//		System.out.println(result);
		
//		WordLadderII wl = new WordLadderII();
//		List<String> wordList = new ArrayList<>();
//		wordList.add("hot");  
//		wordList.add("dot");
//		wordList.add("dog");
//		wordList.add("lot");
//		wordList.add("log");
//		wordList.add("cog");
//		List<List<String>> res = wl.findLadders("hot", "dog", wordList);
//		System.out.println(res);
//		Map<String, List<String>> graph = new HashMap<>();
//		wl.buildGraph(graph, wordList);
//		for (String s : graph.keySet()) {
//			System.out.print(s + "-> ");
//			System.out.print(graph.get(s));
//			System.out.println();
//		}
//		WordLadder wl = new WordLadder();
//		List<String> wordList = new ArrayList<>();
//		wordList.add("most");
//		wordList.add("fist");
//		wordList.add("lost");
//		wordList.add("cost");
//		wordList.add("fish");
//		System.out.println(wl.ladderLength("lost", "cost", wordList));
//		RemoveInvalidParentheses rm = new RemoveInvalidParentheses();
//		String s = ")(f";
//		System.out.println(rm.removeInvalidParentheses(s));
		ReconstructItinerary rs = new ReconstructItinerary();
		List<List<String>> tickets = new ArrayList<>();
//		tickets.add(Arrays.asList("JFK", "SFO"));
//		tickets.add(Arrays.asList("JFK", "ATL"));
//		tickets.add(Arrays.asList("SFO", "ATL"));
//		tickets.add(Arrays.asList("ATL", "JFK"));
//		tickets.add(Arrays.asList("ATL", "SFO"));
		
//		tickets.add(Arrays.asList("MUC", "LHR"));
//		tickets.add(Arrays.asList("JFK", "MUC"));
//		tickets.add(Arrays.asList("SFO", "SJC"));
//		tickets.add(Arrays.asList("LHR", "SFO"));
		tickets.add(Arrays.asList("JFK", "KUL"));
		tickets.add(Arrays.asList("JFK", "NRT"));
		tickets.add(Arrays.asList("NRT", "JFK"));
		System.out.println(rs.findItinerary(tickets));
		URL url = new URL("a");
		System.out.println(url.toString());
	}

}







